// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(function() {
    var Item, List, Todo, TodoApp, todoApp, updateScroll, _ref, _ref1, _ref2, _ref3;
    Item = (function(_super) {
      __extends(Item, _super);

      function Item() {
        _ref = Item.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Item.prototype.defaults = {
        name: 'product name',
        done: false
      };

      return Item;

    })(Backbone.Model);
    List = (function(_super) {
      __extends(List, _super);

      function List() {
        _ref1 = List.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      List.prototype.model = Item;

      List.prototype.localStorage = new Store("todo");

      return List;

    })(Backbone.Collection);
    Todo = (function(_super) {
      __extends(Todo, _super);

      function Todo() {
        this.removeItemFromModel = __bind(this.removeItemFromModel, this);
        this.render = __bind(this.render, this);
        _ref2 = Todo.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      Todo.prototype.initialize = function() {
        _.bindAll;
        console.log("Todo");
        return this.model.bind('remove', this.removeItemFromModel);
      };

      Todo.prototype.render = function() {
        console.log("Todo render");
        return $(this.el).html("<div class='item'><div class='task-name'> " + this.model.get('name') + "</div><button class='removeBtn tiny'></button></div>");
      };

      Todo.prototype.removeItemFromModel = function() {
        return $(this.el).remove();
      };

      Todo.prototype.remove = function() {
        console.log('remove');
        return this.model.destroy();
      };

      Todo.prototype.events = {
        'click .removeBtn': 'remove'
      };

      return Todo;

    })(Backbone.View);
    TodoApp = (function(_super) {
      __extends(TodoApp, _super);

      function TodoApp() {
        this.onChangeModel = __bind(this.onChangeModel, this);
        _ref3 = TodoApp.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      TodoApp.prototype.initialize = function() {
        _.bindAll;
        this.list = new List;
        this.list.bind('add', this.onAddNewItemToList);
        this.list.bind('remove add', this.onChangeModel);
        this.list.fetch();
        $("#list").css("height", ($(window).height() - 155) + "px");
        return this.onChangeModel();
      };

      TodoApp.prototype.onClickAddItem = function() {
        var item;
        item = new Item;
        item.set({
          name: $('input').val()
        });
        $('input').val("");
        this.list.add(item);
        return item.save();
      };

      TodoApp.prototype.onAddNewItemToList = function(item) {
        var todo;
        todo = new Todo({
          model: item
        });
        return $('#list').append(todo.render());
      };

      TodoApp.prototype.onChangeModel = function() {
        return $(".numberOfTasks").html("<b>" + this.list.length + "</b>" + " tasks");
      };

      TodoApp.prototype.events = {
        'click #addItemBtn': 'onClickAddItem',
        'click .removeBtn': 'onClickRemoveBtn'
      };

      return TodoApp;

    })(Backbone.View);
    todoApp = new TodoApp({
      el: $('#todoApp')
    });
    $("#list").niceScroll({
      touchbehavior: false,
      cursorcolor: "rgba(100,100,100,0.8)",
      cursoropacitymin: 0.2,
      cursoropacitymax: 0.5,
      cursorwidth: 8,
      horizrailenabled: false
    });
    updateScroll = function() {
      $("#list").css("height", ($(window).height() - 155) + "px");
      $("#list").getNiceScroll().resize();
      return $("#list").getNiceScroll().resize().show();
    };
    $(window).bind('orientationchange', updateScroll);
    /*
    onDeviceReady = ->
        $('h3').html "device ready"
        onSuccess = (acceleration) ->
            $('h3').html acceleration.x + ' ' + acceleration.y + ' ' + acceleration.z
    
        onError = ->
            $("h3").html("error")
    
        options = { frequency: 100 }
        watchID = navigator.accelerometer.watchAcceleration(onSuccess, onError, options)
    
    
    document.addEventListener('deviceready', onDeviceReady, false)
    
    
    
    
    $("h3").html("onDeviceReady")
    onSuccess = (contacts) ->
        $('h3').html('success find: ' + contacts.length + ' contacts')
    onError = ->
        $("h3").html("error")
    
    options = new ContactFindOptions()
    options.filter = ''
    options.multiple = true
    fields = ['displayName', 'name']
    navigator.contacts.find(fields, onSuccess, onError, options)
    */

    /*
    for i in [1..numberOfLvl] by 1
        $("#listlvl" + i.toString() + " > li").mouseover ->
            $(this).find('.leftMenuItemsCounter').hide()
            $(this).find('.leftMenuItemsConfig').show()
        $("#listlvl" + i.toString() + " > li").mouseout ->
            $(this).find('.leftMenuItemsConfig').hide()
            $(this).find('.leftMenuItemsCounter').show()
    
        $("#listlvl" + i.toString() + " > li").bind "tap", ->
            clearSelected($(this).parent().attr 'id')
            lvl = $(this).parent().attr 'id'
            lvl = lvl.substr(lvl.length - 1, 1)
            itemName = $(this).find('a').html()
            switch parseInt(lvl)
                when 1 then setContainerTitle('showContainer', itemName)
                when 2 then setContainerTitle('eventContainer', itemName)
                when 3 then setContainerTitle('folderContainer', itemName)
                else
            $(this).addClass "selectedItem"
    */

    $("#listlvl1 img, #listlvl2 img, #listlvl3 img, .colorTip").mouseover(function() {
      var colorTip, setColorTipPosition;
      colorTip = $(this).parent().find('.colorTip');
      setColorTipPosition = function() {
        return $(colorTip).css('margin-left', '-' + colorTip.width() + 'px');
      };
      return setTimeout(setColorTipPosition, 0);
    });
    window.socket = new WebSocket('ws://hydrav2.active-loop.com:8020', 'json');
    socket.onopen = function() {
      return socket.send('hello');
    };
    socket.onmessage = function(s) {
      return console.log('hydra SPS: ' + s);
    };
    socket.onerror = function(err) {
      return console.log('hydra SPS Err: ' + err);
    };
    return socket.onclose = function() {
      return console.log('close connection with SPS');
    };
  });

}).call(this);
